{"id":"../../node_modules/codemirror/addon/fold/brace-fold.js","dependencies":[{"name":"E:\\git\\git_github\\resyu\\scratchpad\\package.json","includedInParent":true,"mtime":1571188748655},{"name":"E:\\git\\git_github\\resyu\\scratchpad\\node_modules\\codemirror\\package.json","includedInParent":true,"mtime":1568695610722},{"name":"../../lib/codemirror","loc":{"line":6,"column":16},"parent":"E:\\git\\git_github\\resyu\\scratchpad\\node_modules\\codemirror\\addon\\fold\\brace-fold.js","resolved":"E:\\git\\git_github\\resyu\\scratchpad\\node_modules\\codemirror\\lib\\codemirror.js"}],"generated":{"js":"var define;\n// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"},"sourceMaps":{"js":{"mappings":[{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":1,"column":0},"generated":{"line":2,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":2,"column":0},"generated":{"line":3,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":3,"column":0},"generated":{"line":4,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":4,"column":0},"generated":{"line":5,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":5,"column":0},"generated":{"line":6,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":6,"column":0},"generated":{"line":7,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":7,"column":0},"generated":{"line":8,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":8,"column":0},"generated":{"line":9,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":9,"column":0},"generated":{"line":10,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":10,"column":0},"generated":{"line":11,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":11,"column":0},"generated":{"line":12,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":12,"column":0},"generated":{"line":13,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":13,"column":0},"generated":{"line":14,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":14,"column":0},"generated":{"line":15,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":15,"column":0},"generated":{"line":16,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":16,"column":0},"generated":{"line":17,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":17,"column":0},"generated":{"line":18,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":18,"column":0},"generated":{"line":19,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":19,"column":0},"generated":{"line":20,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":20,"column":0},"generated":{"line":21,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":21,"column":0},"generated":{"line":22,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":22,"column":0},"generated":{"line":23,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":23,"column":0},"generated":{"line":24,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":24,"column":0},"generated":{"line":25,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":25,"column":0},"generated":{"line":26,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":26,"column":0},"generated":{"line":27,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":27,"column":0},"generated":{"line":28,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":28,"column":0},"generated":{"line":29,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":29,"column":0},"generated":{"line":30,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":30,"column":0},"generated":{"line":31,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":31,"column":0},"generated":{"line":32,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":32,"column":0},"generated":{"line":33,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":33,"column":0},"generated":{"line":34,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":34,"column":0},"generated":{"line":35,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":35,"column":0},"generated":{"line":36,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":36,"column":0},"generated":{"line":37,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":37,"column":0},"generated":{"line":38,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":38,"column":0},"generated":{"line":39,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":39,"column":0},"generated":{"line":40,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":40,"column":0},"generated":{"line":41,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":41,"column":0},"generated":{"line":42,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":42,"column":0},"generated":{"line":43,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":43,"column":0},"generated":{"line":44,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":44,"column":0},"generated":{"line":45,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":45,"column":0},"generated":{"line":46,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":46,"column":0},"generated":{"line":47,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":47,"column":0},"generated":{"line":48,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":48,"column":0},"generated":{"line":49,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":49,"column":0},"generated":{"line":50,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":50,"column":0},"generated":{"line":51,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":51,"column":0},"generated":{"line":52,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":52,"column":0},"generated":{"line":53,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":53,"column":0},"generated":{"line":54,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":54,"column":0},"generated":{"line":55,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":55,"column":0},"generated":{"line":56,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":56,"column":0},"generated":{"line":57,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":57,"column":0},"generated":{"line":58,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":58,"column":0},"generated":{"line":59,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":59,"column":0},"generated":{"line":60,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":60,"column":0},"generated":{"line":61,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":61,"column":0},"generated":{"line":62,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":62,"column":0},"generated":{"line":63,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":63,"column":0},"generated":{"line":64,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":64,"column":0},"generated":{"line":65,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":65,"column":0},"generated":{"line":66,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":66,"column":0},"generated":{"line":67,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":67,"column":0},"generated":{"line":68,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":68,"column":0},"generated":{"line":69,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":69,"column":0},"generated":{"line":70,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":70,"column":0},"generated":{"line":71,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":71,"column":0},"generated":{"line":72,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":72,"column":0},"generated":{"line":73,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":73,"column":0},"generated":{"line":74,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":74,"column":0},"generated":{"line":75,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":75,"column":0},"generated":{"line":76,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":76,"column":0},"generated":{"line":77,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":77,"column":0},"generated":{"line":78,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":78,"column":0},"generated":{"line":79,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":79,"column":0},"generated":{"line":80,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":80,"column":0},"generated":{"line":81,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":81,"column":0},"generated":{"line":82,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":82,"column":0},"generated":{"line":83,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":83,"column":0},"generated":{"line":84,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":84,"column":0},"generated":{"line":85,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":85,"column":0},"generated":{"line":86,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":86,"column":0},"generated":{"line":87,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":87,"column":0},"generated":{"line":88,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":88,"column":0},"generated":{"line":89,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":89,"column":0},"generated":{"line":90,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":90,"column":0},"generated":{"line":91,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":91,"column":0},"generated":{"line":92,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":92,"column":0},"generated":{"line":93,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":93,"column":0},"generated":{"line":94,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":94,"column":0},"generated":{"line":95,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":95,"column":0},"generated":{"line":96,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":96,"column":0},"generated":{"line":97,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":97,"column":0},"generated":{"line":98,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":98,"column":0},"generated":{"line":99,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":99,"column":0},"generated":{"line":100,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":100,"column":0},"generated":{"line":101,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":101,"column":0},"generated":{"line":102,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":102,"column":0},"generated":{"line":103,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":103,"column":0},"generated":{"line":104,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":104,"column":0},"generated":{"line":105,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":105,"column":0},"generated":{"line":106,"column":0}},{"source":"../../node_modules/codemirror/addon/fold/brace-fold.js","original":{"line":106,"column":0},"generated":{"line":107,"column":0}}],"sources":{"../../node_modules/codemirror/addon/fold/brace-fold.js":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n(function(mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));\n  else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);\n  else // Plain browser env\n    mod(CodeMirror);\n})(function(CodeMirror) {\n\"use strict\";\n\nCodeMirror.registerHelper(\"fold\", \"brace\", function(cm, start) {\n  var line = start.line, lineText = cm.getLine(line);\n  var tokenType;\n\n  function findOpening(openCh) {\n    for (var at = start.ch, pass = 0;;) {\n      var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n      if (found == -1) {\n        if (pass == 1) break;\n        pass = 1;\n        at = lineText.length;\n        continue;\n      }\n      if (pass == 1 && found < start.ch) break;\n      tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n      if (!/^(comment|string)/.test(tokenType)) return found + 1;\n      at = found - 1;\n    }\n  }\n\n  var startToken = \"{\", endToken = \"}\", startCh = findOpening(\"{\");\n  if (startCh == null) {\n    startToken = \"[\", endToken = \"]\";\n    startCh = findOpening(\"[\");\n  }\n\n  if (startCh == null) return;\n  var count = 1, lastLine = cm.lastLine(), end, endCh;\n  outer: for (var i = line; i <= lastLine; ++i) {\n    var text = cm.getLine(i), pos = i == line ? startCh : 0;\n    for (;;) {\n      var nextOpen = text.indexOf(startToken, pos), nextClose = text.indexOf(endToken, pos);\n      if (nextOpen < 0) nextOpen = text.length;\n      if (nextClose < 0) nextClose = text.length;\n      pos = Math.min(nextOpen, nextClose);\n      if (pos == text.length) break;\n      if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n        if (pos == nextOpen) ++count;\n        else if (!--count) { end = i; endCh = pos; break outer; }\n      }\n      ++pos;\n    }\n  }\n  if (end == null || line == end) return;\n  return {from: CodeMirror.Pos(line, startCh),\n          to: CodeMirror.Pos(end, endCh)};\n});\n\nCodeMirror.registerHelper(\"fold\", \"import\", function(cm, start) {\n  function hasImport(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type != \"keyword\" || start.string != \"import\") return null;\n    // Now find closing semicolon, return its position\n    for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n      var text = cm.getLine(i), semi = text.indexOf(\";\");\n      if (semi != -1) return {startCh: start.end, end: CodeMirror.Pos(i, semi)};\n    }\n  }\n\n  var startLine = start.line, has = hasImport(startLine), prev;\n  if (!has || hasImport(startLine - 1) || ((prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1))\n    return null;\n  for (var end = has.end;;) {\n    var next = hasImport(end.line + 1);\n    if (next == null) break;\n    end = next.end;\n  }\n  return {from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)), to: end};\n});\n\nCodeMirror.registerHelper(\"fold\", \"include\", function(cm, start) {\n  function hasInclude(line) {\n    if (line < cm.firstLine() || line > cm.lastLine()) return null;\n    var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n    if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n    if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n  }\n\n  var startLine = start.line, has = hasInclude(startLine);\n  if (has == null || hasInclude(startLine - 1) != null) return null;\n  for (var end = startLine;;) {\n    var next = hasInclude(end + 1);\n    if (next == null) break;\n    ++end;\n  }\n  return {from: CodeMirror.Pos(startLine, has + 1),\n          to: cm.clipPos(CodeMirror.Pos(end))};\n});\n\n});\n"},"lineCount":107}},"error":null,"hash":"ec731563f68b6a91382ab4819ed5fea0","cacheData":{"env":{}}}